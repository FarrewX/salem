const express = require('express')
const app = express()

//socket.io setup
const http = require('http')
const server = http.createServer(app)
const { Server } = require("socket.io")
const io = new Server(server, { pingInterval:2000, pingTimeout: 5000, connectionStateRecovery: {}})

const path = require('path');

const port = 3000

app.use(express.static('public'))

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html')
})

app.get('/room.html', (req, res) => {
  res.sendFile(path.join(__dirname, './component/room.html'));
});

server.listen(port, () => {
  console.log(`app listening on port ${port}`)
})

console.log('server did loaded')

const rooms = {};
const backendPlayers = {};
const playerSockets = {}; // ‡πÉ‡∏ä‡πâ map ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô -> socket
const roomCleanupTimers = {}; // roomId -> timeout ID
let skillDeck = [];

io.on('connection', (socket) => {
  socket.on('createRoom', ({ roomId, playerName }) => {
    if (rooms[roomId]) {
      socket.emit('error', '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;

    rooms[roomId] = {
      players: [playerName],
      host: playerName
    };

    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    socket.emit('hostInfo', { isHost: true });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('joinRoom', ({ roomId, playerName }) => {
    if (!rooms[roomId]) {
      socket.emit('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    if (rooms[roomId].players.includes(playerName)) {
      socket.emit('error', '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    rooms[roomId].players.push(playerName);
    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;


    const isHost = (rooms[roomId].host === playerName);
    socket.emit('hostInfo', { isHost });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('disconnect', (reason) => {
    console.log(reason)
    const roomId = socket.roomId;
    const playerName = socket.playerName;

    if (roomId && rooms[roomId]) {
      // ‡∏•‡∏ö player ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
      rooms[roomId].players = rooms[roomId].players.filter(p => p !== playerName);
      delete playerSockets[roomId]?.[playerName];

      if (rooms[roomId].players.length === 0) {
        console.log(`üïí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        roomCleanupTimers[roomId] = setTimeout(() => {
          console.log(`üßπ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

          delete rooms[roomId];
          delete playerSockets[roomId];
          delete backendPlayers[roomId];
          delete rooms[roomId]?.playerHands;
          delete rooms[roomId]?.seatMap;
          delete rooms[roomId]?.skillDeck;
          delete rooms[roomId]?.roles;
          delete rooms[roomId]?.host;
          delete roomCleanupTimers[roomId];
        }, 5000);

      } else {
        io.to(roomId).emit('updatePlayers', rooms[roomId].players);
        io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
      }
    }
  delete backendPlayers[socket.playerName];
  });
  
  function generateDeck(playerCount) {
    const totalCards = playerCount * 5;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡πà‡∏°‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    let numWitch = 1;

    if (playerCount <= 5) numWitch = 1;
    if (playerCount >= 6) numWitch = 2;

    const cardsToRemove = numWitch + 1;
    const finalCardCount = totalCards - cardsToRemove;

    const deck = [];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡πÅ‡∏°‡πà‡∏°‡∏î
    for (let i = 0; i < numWitch; i++) {
      deck.push("‡πÅ‡∏°‡πà‡∏°‡∏î");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à
    for (let i = 0; i < 1; i++) {
      deck.push("‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    for (let i = 0; i < finalCardCount; i++) {
      deck.push("‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô");
    }

    return deck;
  }

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  function dealCards(players) {
    let deck = shuffle(generateDeck(players.length));
    const roles = {};
    players.forEach((playerName) => {
      roles[playerName] = [];
      for (let i = 0; i < 5; i++) {
        roles[playerName].push(deck.pop());
      }
    });
    return roles; // { "player1": ["‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô", "‡πÅ‡∏°‡πà‡∏°‡∏î", ...], "player2": [...] }
  }

  function findSocketByName(roomId, playerName) {
    return playerSockets[roomId]?.[playerName];
  }

  //‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Å‡∏≠‡∏áskillcard ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  function generateCardSkill(roomId){
    const salemCardData = [
      { name: "‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏ö‡∏†‡∏±‡∏¢", description: "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏ö‡∏†‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏±‡∏ï‡∏ï‡∏¥‡∏Å‡∏≤‡∏•", canTargetSelf: false, count: 1 },
      { name: "‡πÅ‡∏°‡πà‡∏™‡∏∑‡πà‡∏≠", description: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2 ‡∏Ñ‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏°‡πà‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏≤‡∏¢ ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô", canTargetSelf: false, count: 2 },
      { name: "‡∏Ç‡πâ‡∏≠‡πÅ‡∏Å‡πâ‡∏ï‡πà‡∏≤‡∏á", description: "‡∏•‡∏ö‡∏•‡πâ‡∏≤‡∏á(‡∏ó‡∏¥‡πâ‡∏á) 1-3 ‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô", canTargetSelf: false, count: 3 },
      { name: "‡∏Ç‡∏∑‡πà‡∏≠‡∏Ñ‡∏≤", description: "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏∑‡πà‡∏≠‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", canTargetSelf: false, count: 3 },
      { name: "‡∏ß‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¥‡∏á", description: "‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô 1 ‡∏Ñ‡∏ô", canTargetSelf: false, count: 1 },
      { name: "‡πÅ‡∏û‡∏∞‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏õ", description: "‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏î‡∏á ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô 1 ‡∏Ñ‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏ô", canTargetSelf: false, count: 2 },
      { name: "‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏≤", description: "", canTargetSelf: false, count: 35 },
      { name: "‡∏û‡∏•‡∏±‡∏á‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤", description: "‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏™‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏™‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ", canTargetSelf: false, count: 1 },
      { name: "‡∏û‡∏¢‡∏≤‡∏ô", description: "‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏≤", canTargetSelf: false, count: 1 },
      { name: "‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô", description: "‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏≤", canTargetSelf: false, count: 5 },
      { name: "‡∏Ñ‡∏≥‡∏™‡∏≤‡∏õ", description: "‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô 1 ‡πÉ‡∏ö", canTargetSelf: false, count: 1 },
      { name: "‡∏õ‡∏•‡πâ‡∏ô", description: "‡∏ô‡∏≥‡∏Å‡∏≤‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô 1 ‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏ô", canTargetSelf: false, count: 1 },
    ];

    let deck_skillcard = [];
    let id = 1;

    salemCardData.forEach(cardType => {
      for (let i = 0; i < cardType.count; i++) {
        deck_skillcard.push({
          id: id++,
          name: cardType.name,
          description: cardType.description,
          canTargetSelf: cardType.canTargetSelf
        });
      }
    });

    return deck_skillcard;
  }

  // ‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î
  function drawCardFromDeck(roomId, playerName) {
    const room = rooms[roomId];
    if (!room || !room.skillDeck || room.skillDeck.length === 0) return null;

    const card = room.skillDeck.pop(); // ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á deck

    if (!room.playerHands[playerName]) {
      room.playerHands[playerName] = [];
    }

    room.playerHands[playerName].push(card);
    return card;
  }

  // ‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î
  socket.on('drawCard', ({ roomId, playerName }) => {
    if (!roomId || !playerName) return;

    const drawnCard = drawCardFromDeck(roomId, playerName);

    if (!drawnCard) {
      socket.emit('error', '‡∏Å‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    socket.emit("cardDrawn", drawnCard);
    socket.emit("updateHand", rooms[roomId].playerHands[playerName]);

    // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏µ‡πà‡πÉ‡∏ö
    io.to(roomId).emit('deckCount', rooms[roomId].skillDeck.length);

    console.log(`Player ${playerName} drew a card: ${drawnCard.name} ${drawnCard.description}`);
    //=====================================
    // ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
  });


  socket.on("startGame", ({ roomId , playerName }) => {
    const room = rooms[roomId];
    if (!room) return;

    if (socket.playerName !== room.host) {
      socket.emit("error", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏Æ‡∏™‡∏ï‡πå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ");
      return;
    }

    const playerCount = room.players.length;
    const roles = dealCards(room.players); // ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï 5 ‡πÉ‡∏ö
    skillDeck = shuffle(generateCardSkill(roomId));

    rooms[roomId].roles = roles;
    rooms[roomId].skillDeck = skillDeck;
    rooms[roomId].playerHands = {};
    rooms[roomId].playerCount = playerCount;
    rooms[roomId].seatMap = {};

    socket.roomId = roomId;
    socket.playerName = playerName;

    // Map ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
    const shuffledPlayers = shuffle(room.players);
    room.seatMap = {};
    shuffledPlayers.forEach((playerName, index) => {
      room.seatMap[playerName] = index;
    });

    console.log("seatMap:", room.seatMap);

    // ‡∏™‡πà‡∏á role ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    room.players.forEach((playerName) => {
      const playerSocket = findSocketByName(roomId, playerName);
      if (playerSocket) {
        playerSocket.emit("yourRole", room.roles[playerName]);
        playerSocket.emit("seatMap",  room.seatMap[playerName]);
      }
    });

    io.to(roomId).emit("gameState", {
      message: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß!",
      players: room.players.map((playerName) => ({ 
        playerName: playerName,
        roles: room.roles[playerName],
        seatMap: room.seatMap[playerName],
        status: "‡∏õ‡∏Å‡∏ï‡∏¥"
        })),
    });

    io.to(roomId).emit("gameStarted");
    io.to(roomId).emit("skillDeck", room.skillDeck);
    io.to(roomId).emit("deckCount", room.skillDeck.length);
    io.to(roomId).emit("forceDisconnect", { message: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß" })

    console.log(`‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á ${roomId} = ${room.skillDeck} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${room.skillDeck.length} ‡πÉ‡∏ö`)
  });

  socket.on("reconnectToRoom", ({ roomId, playerName }) => {
    socket.playerName = playerName;
    socket.roomId = roomId;
    socket.join(roomId);
    
    // console.log(`${playerName} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á
    if (roomCleanupTimers[roomId]) {
      clearTimeout(roomCleanupTimers[roomId]);
      delete roomCleanupTimers[roomId];
      console.log(`üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤`);
    }

     // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô socket ‡πÉ‡∏´‡∏°‡πà
    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á room object ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: [],
        roles: {},
        host: null,
        skillDeck: {},
        playerHands: {},
        seatMap: {},
      };
    } else if (!rooms[roomId].roles && roles) {
      rooms[roomId].roles = roles; // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ memory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }

    // ‚õ≥Ô∏è ‡πÇ‡∏´‡∏•‡∏î role
    const roles = rooms[roomId]?.roles || {};
    console.log(`üîç ‡πÇ‡∏´‡∏•‡∏î role ‡∏Ç‡∏≠‡∏á ${playerName} ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId}:`, roles[playerName]);

    // ‚úÖ ‡πÉ‡∏™‡πà player ‡∏•‡∏á‡πÉ‡∏ô room ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId].players.includes(playerName)) {
      rooms[roomId].players.push(playerName);
    }
    
    // üîÑ ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà reconnect
    const seatIndex = rooms[roomId].seatMap?.[playerName];
    if (seatIndex !== undefined) {
      socket.emit("seatMap", seatIndex);
      // console.log(`‚ôªÔ∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${playerName} ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°: ${seatIndex}`);
    } else {
      console.warn(`‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ seatMap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${playerName} ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId}`);
    }

    // ‡∏™‡πà‡∏á‡πÑ‡∏û‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    if (rooms[roomId].roles && rooms[roomId].roles[playerName]) {
      socket.emit("yourRole", rooms[roomId].roles[playerName]);
    } else {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á ${playerName}`);

      const targetSocket = findSocketByName(roomId, playerName);
      if (targetSocket) {
        targetSocket.emit("forceDisconnect", { roomId, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        targetSocket.disconnect(true);
      }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const room = rooms[roomId];

    //‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏Å‡∏¥‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á
    const savedSkillDeck = rooms[roomId].skillDeck;
    if (savedSkillDeck) {
      socket.emit("skillDeck", savedSkillDeck);
    }else {
      rooms[roomId].skillDeck = []; // fallback ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö skillDeck ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId}`);
    }

    //‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏Å‡∏¥‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const handplayer = rooms[roomId].playerHands[playerName];
    if (handplayer && !rooms[roomId].playerHands[playerName]) {
      rooms[roomId].playerHands = handplayer;
    }
    if (rooms[roomId].playerHands?.[playerName]) {
      socket.emit("updateHand", rooms[roomId].playerHands[playerName]);
      console.log(rooms[roomId].playerHands[playerName])
    }
    
    io.to(roomId).emit('updatePlayers', room.players);
    io.to(roomId).emit("skillDeck", room.skillDeck);
    
    if (rooms[roomId].playerHands?.[playerName]) {
      socket.emit("updateHand", rooms[roomId].playerHands[playerName]);
    }
  });

  socket.on("playCard", ({ roomId, cardIndex, targetId }) => {
    const playerName = socket.playerName
    const room = rooms[roomId];

    const hand = rooms[roomId]?.playerHands?.[playerName] || [];
    const card = hand.splice(cardIndex, 1)[0];

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    io.to(roomId).emit("cardPlayed", {
      from: socket.roomId,
      to: targetId,
      card,
    });
  });

  socket.on("requestHand", ({ roomId, playerName }) => {
    const hand = rooms[roomId]?.playerHands[playerName] || [];
    socket.emit("updateHand", hand);
  });

  // console.log(backendPlayers)
});

setInterval(() => {
  io.emit('updatePlayers', backendPlayers);
}, 500)