const express = require('express')
const app = express()

//socket.io setup
const http = require('http')
const server = http.createServer(app)
const { Server } = require("socket.io")
const io = new Server(server, { pingInterval:2000, pingTimeout: 5000})

const fs = require('fs');
const path = require('path');

const port = 3000

app.use(express.static('public'))

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html')
})

app.get('/room.html', (req, res) => {
  res.sendFile(path.join(__dirname, './component/room.html'));
});

server.listen(port, () => {
  console.log(`app listening on port ${port}`)
})

console.log('server did loaded')

const rooms = {};
const backendPlayers = {};
const playerSockets = {}; // ‡πÉ‡∏ä‡πâ map ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô -> socket
const roomCleanupTimers = {}; // roomId -> timeout ID
const hand = [];
let skillDeck = [];

io.on('connection', (socket) => {
  socket.on('createRoom', ({ roomId, playerName }) => {
    if (rooms[roomId]) {
      socket.emit('error', '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;

    rooms[roomId] = {
      players: [playerName],
      host: playerName
    };

    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    socket.emit('hostInfo', { isHost: true });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('joinRoom', ({ roomId, playerName }) => {
    if (!rooms[roomId]) {
      socket.emit('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    if (rooms[roomId].players.includes(playerName)) {
      socket.emit('error', '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    rooms[roomId].players.push(playerName);
    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;


    const isHost = (rooms[roomId].host === playerName);
    socket.emit('hostInfo', { isHost });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('disconnect', (reason) => {
    console.log(reason)
    const roomId = socket.roomId;
    const playerName = socket.playerName;

    if (roomId && rooms[roomId]) {
      // ‡∏•‡∏ö player ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
      rooms[roomId].players = rooms[roomId].players.filter(p => p !== playerName);
      delete playerSockets[roomId]?.[playerName];

      if (rooms[roomId].players.length === 0) {
        console.log(`üïí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        roomCleanupTimers[roomId] = setTimeout(() => {
          console.log(`üßπ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

          delete rooms[roomId];
          delete playerSockets[roomId];
          delete backendPlayers[roomId];
          delete roomCleanupTimers[roomId];

          const filePath = path.join(__dirname, 'data', `${roomId}_roles.json`);
          if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡πâ‡∏ß`);
          }

          // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î
          const cardsFilePath = path.join(__dirname, 'data', `${roomId}_skillDeck.json`);
          if (fs.existsSync(cardsFilePath)) {
            fs.unlinkSync(cardsFilePath);
            // console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡πâ‡∏ß`);
          }

          const handsFilePath = path.join(__dirname, 'data', `${roomId}_hands.json`);
          if (fs.existsSync(handsFilePath)) {
            fs.unlinkSync(handsFilePath);
            // console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡πâ‡∏ß`);
          }
        }, 1000 /*2 * 60 * 1000*/);

      } else {
        io.to(roomId).emit('updatePlayers', rooms[roomId].players);
        io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
      }

    }

  delete backendPlayers[socket.playerName];
  });
  
  function generateDeck(playerCount) {
    const totalCards = playerCount * 5;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡πà‡∏°‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    let numWitch = 1;

    if (playerCount <= 5) numWitch = 1;
    if (playerCount >= 6) numWitch = 2;

    const cardsToRemove = numWitch + 1;
    const finalCardCount = totalCards - cardsToRemove;

    const deck = [];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡πÅ‡∏°‡πà‡∏°‡∏î
    for (let i = 0; i < numWitch; i++) {
      deck.push("‡πÅ‡∏°‡πà‡∏°‡∏î");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à
    for (let i = 0; i < 1; i++) {
      deck.push("‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏û‡πà‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    for (let i = 0; i < finalCardCount; i++) {
      deck.push("‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô");
    }

    return deck;
  }

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  function dealCards(players) {
    let deck = shuffle(generateDeck(players.length));
    const roles = {};
    players.forEach((playerName) => {
      roles[playerName] = [];
      for (let i = 0; i < 5; i++) {
        roles[playerName].push(deck.pop());
      }
    });
    return roles; // { "player1": ["‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô", "‡πÅ‡∏°‡πà‡∏°‡∏î", ...], "player2": [...] }
  }

  function findSocketByName(roomId, playerName) {
    return playerSockets[roomId]?.[playerName];
  }

  function saveRolesToFile(roomId, roles) {
    const dir = path.join(__dirname, 'data');
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }

    const filePath = path.join(dir, `${roomId}_roles.json`);
    const data = {
      timestamp: new Date().toISOString(),
      roles
    };
    fs.writeFileSync(filePath, JSON.stringify({ roles }, null, 2), 'utf8');
  }

  function loadRolesFromFile(roomId) {
    const filePath = path.join(__dirname, 'data', `${roomId}_roles.json`);
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      try {
        const parsed = JSON.parse(data);
        if (parsed.roles) return parsed.roles;
        return parsed; // fallback
      } catch (err) {
        console.error("Error parsing JSON file:", err);
        return null;
      }
    }
    return null;
  }

  function saveSkillDeckToFile(roomId, skillDeck) {
    const dir = path.join(__dirname, 'data');
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir);
    }
    const filePath = path.join(dir, `${roomId}_skillDeck.json`);
    fs.writeFileSync(filePath, JSON.stringify(skillDeck, null, 2), 'utf8');
  }

  function loadSkillDeckFromFile(roomId) {
    const filePath = path.join(__dirname, 'data', `${roomId}_skillDeck.json`);
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      try {
        return JSON.parse(data);
      } catch (err) {
        console.error("Error parsing skillDeck JSON file:", err);
        return null;
      }
    }
    return null;
  }

  //‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Å‡∏≠‡∏áskillcard ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  function generateCardSkill(roomId){
    const salemCardData = [
      { name: "Investigate", description: "‡∏î‡∏π‡πÑ‡∏û‡πà Tryal ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô", canTargetSelf: false, count: 6 },
      { name: "Kill", description: "‡∏Ü‡πà‡∏≤ Tryal ‡πÉ‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô", canTargetSelf: false, count: 3 },
      { name: "Stocks", description: "‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", canTargetSelf: false, count: 5 },
      { name: "Alibi", description: "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å Investigate ‡∏´‡∏£‡∏∑‡∏≠ Kill", canTargetSelf: true, count: 4 },
      { name: "Self Defense", description: "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Kill ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á", canTargetSelf: true, count: 2 },
      { name: "Conspiracy", description: "‡∏™‡∏±‡πà‡∏á Kill ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢", canTargetSelf: false, count: 3 },
      { name: "Blackmail", description: "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏π‡∏î", canTargetSelf: false, count: 4 },
      { name: "Scapegoat", description: "‡πÇ‡∏≠‡∏ô‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Kill ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°", canTargetSelf: true, count: 2 },
      { name: "Pardon", description: "‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Stocks ‡∏´‡∏£‡∏∑‡∏≠ Blackmail", canTargetSelf: true, count: 2 },
      { name: "Matchmaker", description: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2 ‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡∏ä‡∏∞‡∏ï‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô", canTargetSelf: false, count: 1 }
    ];

    let deck_skillcard = [];
    let id = 1;

    salemCardData.forEach(cardType => {
      for (let i = 0; i < cardType.count; i++) {
        deck_skillcard.push({
          id: id++,
          name: cardType.name,
          description: cardType.description,
          canTargetSelf: cardType.canTargetSelf
        });
      }
    });

    return deck_skillcard;
  }

  // ‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å deck file ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå hand ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  function drawCardFromFileAndSaveToHand(roomId, playerName) {
    const deckPath = path.join(__dirname, 'data', `${roomId}_skillDeck.json`);
    const handPath = path.join(__dirname, 'data', `${roomId}_hands.json`);

    if (!fs.existsSync(deckPath)) return null;

    // ‡πÇ‡∏´‡∏•‡∏î skill deck
    const deck = JSON.parse(fs.readFileSync(deckPath, 'utf8'));
    if (deck.length === 0) return null;

    const drawnCard = deck.pop(); // ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å deck ‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏•‡∏á
    fs.writeFileSync(deckPath, JSON.stringify(deck, null, 2), 'utf8');

    // ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    let hands = {};
    if (fs.existsSync(handPath)) {
      hands = JSON.parse(fs.readFileSync(handPath, 'utf8'));
    }

    if (!hands[playerName]) hands[playerName] = [];

    hands[playerName].push(drawnCard);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    fs.writeFileSync(handPath, JSON.stringify(hands, null, 2), 'utf8');

    return drawnCard;
  }

  function savePlayerHandsToFile(roomId, playerHands) {
    const dir = path.join(__dirname, 'data');
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir);
    }
    const filePath = path.join(dir, `${roomId}_hands.json`);
    fs.writeFileSync(filePath, JSON.stringify(playerHands, null, 2), 'utf8');
  }

  function loadPlayerHandsFromFile(roomId) {
    const filePath = path.join(__dirname, 'data', `${roomId}_hands.json`);
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      try {
        return JSON.parse(data);
      } catch (err) {
        console.error("Error parsing playerHands JSON file:", err);
        return null;
      }
    }
    return null;
  }

  // ‡∏≠‡πà‡∏≤‡∏ô & ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå skill deck
  // function drawCardFromFileDeck(roomId) {
  //   const deckPath = path.join(__dirname, `${roomId}_skillDeck.json`);
  //   if (!fs.existsSync(deckPath)) return null;

  //   const deck = JSON.parse(fs.readFileSync(deckPath, 'utf-8'));

  //   if (deck.length === 0) return null;

  //   const drawnCard = deck.pop();
  //   fs.writeFileSync(deckPath, JSON.stringify(deck, null, 2));

  //   return drawnCard;
  // }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  // function addCardToPlayerHand(roomId, playerName, card) {
  //   const handPath = path.join(__dirname, `${roomId}_${playerName}_hands.json`);

  //   let hand = [];
  //   if (fs.existsSync(handPath)) {
  //     hand = JSON.parse(fs.readFileSync(handPath, 'utf-8'));
  //   }

  //   hand.push(card);
  //   fs.writeFileSync(handPath, JSON.stringify(hand, null, 2));
  // }

  //‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î
  socket.on('drawCard', ({ roomId, playerName }) => {
    if (!roomId || !playerName) return;

    const drawnCard = drawCardFromFileAndSaveToHand(roomId, playerName);
    if (!drawnCard) {
      socket.emit('error', '‡∏Å‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    socket.emit("cardDrawn", drawnCard);

    // ‡∏™‡πà‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
    const handPath = path.join(__dirname, 'data', `${roomId}_hands.json`);
    const allHands = fs.existsSync(handPath)
      ? JSON.parse(fs.readFileSync(handPath, 'utf8'))
      : {};
    socket.emit("updateHand", allHands[playerName] || []);

    // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£
    const deckPath = path.join(__dirname, 'data', `${roomId}_skillDeck.json`);
    const deck = fs.existsSync(deckPath)
      ? JSON.parse(fs.readFileSync(deckPath, 'utf8'))
      : [];
    io.to(roomId).emit('deckCount', deck.length);
  });


  socket.on("startGame", ({ roomId , playerName }) => {
    const room = rooms[roomId];
    if (!room) return;

    if (socket.playerName !== room.host) {
      socket.emit("error", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏Æ‡∏™‡∏ï‡πå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ");
      return;
    }

    const playerCount = room.players.length;
    const roles = dealCards(room.players); // ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï 5 ‡πÉ‡∏ö
    skillDeck = shuffle(generateCardSkill(roomId));

    room.roles = roles;
    room.skillDeck = skillDeck;
    room.playerHands = {};

    // Map ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á
    room.seatMap = {};
    room.players.forEach((playerName, index) => {
      room.seatMap[playerName] = index;
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    saveRolesToFile(roomId, roles);
    saveSkillDeckToFile(roomId, room.skillDeck);
    savePlayerHandsToFile(roomId, room.playerHands);

    // ‡∏™‡πà‡∏á role ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    room.players.forEach((playerName) => {
      const playerSocket = findSocketByName(roomId, playerName);
      if (playerSocket) {
        playerSocket.emit("yourRole", roles[playerName]);
        playerSocket.emit("yourSeatIndex", { seatIndex: room.seatMap[playerName] });
      }
    });

    // console.log(`[${new Date().toLocaleString()}] ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡πÉ‡∏´‡πâ‡∏´‡πâ‡∏≠‡∏á ${roomId}:`, roles);

    rooms[roomId].players.forEach((playerName) => {
      const playerSocket = findSocketByName(roomId, playerName);
      if (playerSocket) {
        playerSocket.emit("yourSeatIndex", { seatIndex: room.seatMap[playerName] });
      }
    });

    io.to(roomId).emit("gameState", {
      message: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß!",
      players: room.players.map((playerName) => ({ 
        playerName: playerName,
        seatIndex: room.seatMap[playerName],
        status: "‡∏õ‡∏Å‡∏ï‡∏¥"
        })),
    });

    io.to(roomId).emit("gameStarted");
    io.to(roomId).emit("skillDeck", room.skillDeck);
    io.to(roomId).emit("deckCount", room.skillDeck.length);
    io.to(roomId).emit("forceDisconnect", { message: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß" })
  });

  socket.on("reconnectToRoom", ({ roomId, playerName }) => {
    socket.playerName = playerName;
    socket.roomId = roomId;
    socket.join(roomId);
    
    // console.log(`${playerName} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á
    if (roomCleanupTimers[roomId]) {
      clearTimeout(roomCleanupTimers[roomId]);
      delete roomCleanupTimers[roomId];
      console.log(`üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤`);
    }

     // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô socket ‡πÉ‡∏´‡∏°‡πà
    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;

    // ‚õ≥Ô∏è ‡πÇ‡∏´‡∏•‡∏î roles ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    const roles = loadRolesFromFile(roomId);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á room object ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: [],
        roles: roles || {},
        host: null,
      };
    } else if (!rooms[roomId].roles && roles) {
      rooms[roomId].roles = roles; // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ memory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }

    // ‚úÖ ‡πÉ‡∏™‡πà player ‡∏•‡∏á‡πÉ‡∏ô room ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId].players.includes(playerName)) {
      rooms[roomId].players.push(playerName);
    }

    // ‡∏™‡πà‡∏á‡πÑ‡∏û‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    if (rooms[roomId].roles && rooms[roomId].roles[playerName]) {
      socket.emit("yourRole", rooms[roomId].roles[playerName]);
    } else {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á ${playerName}`);

      const targetSocket = findSocketByName(roomId, playerName);
      if (targetSocket) {
        targetSocket.emit("forceDisconnect", { roomId, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        targetSocket.disconnect(true);
      }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const room = rooms[roomId];

    //‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏Å‡∏¥‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á
    const savedSkillDeck = loadSkillDeckFromFile(roomId);
    if (savedSkillDeck && rooms[roomId].skillDeck) {
      rooms[roomId].skillDeck = savedSkillDeck;
    } else {
      rooms[roomId].skillDeck = []; // fallback ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö skillDeck ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId}`);
    }

    //‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏Å‡∏¥‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const handsFromFile = loadPlayerHandsFromFile(roomId);
    if (handsFromFile && !rooms[roomId].playerHands) {
      rooms[roomId].playerHands = handsFromFile;
    }
    if (rooms[roomId].playerHands?.[playerName]) {
      socket.emit("updateHand", rooms[roomId].playerHands[playerName]);
      // console.log(rooms[roomId].playerHands[playerName])
    }
    
    io.to(roomId).emit('updatePlayers', room.players);
    io.to(roomId).emit("skillDeck", room.skillDeck);
    
    if (rooms[roomId].playerHands?.[playerName]) {
      socket.emit("updateHand", rooms[roomId].playerHands[playerName]);
    }
  });

  socket.on("playCard", ({ roomId, cardIndex, targetId }) => {
    const playerName = socket.playerName
    const room = rooms[roomId];

    const card = playerName.hand.splice(cardIndex, 1)[0]; // Remove from hand

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    io.to(roomId).emit("cardPlayed", {
      from: socket.id,
      to: targetId,
      card,
    });
  });

  socket.on("requestHand", ({ roomId, playerName }) => {
    const hand = rooms[roomId]?.playerHands[playerName] || [];
    socket.emit("updateHand", hand);
  });

  // console.log(backendPlayers)
});

setInterval(() => {
  io.emit('updatePlayers', backendPlayers);
}, 250)