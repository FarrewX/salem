const express = require('express')
const app = express()

//socket.io setup
const http = require('http')
const server = http.createServer(app)
const { Server } = require("socket.io")
const io = new Server(server, { pingInterval:2000, pingTimeout: 5000})

const fs = require('fs');
const path = require('path');

const port = 3000

app.use(express.static('public'))

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html')
})

app.get('/room.html', (req, res) => {
  res.sendFile(path.join(__dirname, './component/room.html'));
});

server.listen(port, () => {
  console.log(`app listening on port ${port}`)
})

console.log('server did loaded')

const rooms = {};
const backendPlayers = {};
const playerSockets = {}; // ‡πÉ‡∏ä‡πâ map ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô -> socket
const roomCleanupTimers = {}; // roomId -> timeout ID

io.on('connection', (socket) => {
  console.log('User connected');

  socket.on('createRoom', ({ roomId, playerName }) => {
    if (rooms[roomId]) {
      socket.emit('error', '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;


    rooms[roomId] = {
      players: [playerName],
      host: playerName
    };

    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    socket.emit('hostInfo', { isHost: true });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('joinRoom', ({ roomId, playerName }) => {
    if (!rooms[roomId]) {
      socket.emit('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    if (rooms[roomId].players.includes(playerName)) {
      socket.emit('error', '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á');
      return;
    }

    rooms[roomId].players.push(playerName);
    socket.join(roomId);
    socket.roomId = roomId;
    socket.playerName = playerName;

    if (!playerSockets[roomId]) playerSockets[roomId] = {};
    playerSockets[roomId][playerName] = socket;


    const isHost = (rooms[roomId].host === playerName);
    socket.emit('hostInfo', { isHost });
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
    io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
  });

  socket.on('disconnect', (reason) => {
    console.log(reason)
    const roomId = socket.roomId;
    const playerName = socket.playerName;

    if (roomId && rooms[roomId]) {
      // ‡∏•‡∏ö player ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
      rooms[roomId].players = rooms[roomId].players.filter(p => p !== playerName);
      delete playerSockets[roomId]?.[playerName];

      if (rooms[roomId].players.length === 0) {
        console.log(`üïí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        roomCleanupTimers[roomId] = setTimeout(() => {
          console.log(`üßπ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

          delete rooms[roomId];
          delete playerSockets[roomId];
          delete backendPlayers[roomId];
          delete roomCleanupTimers[roomId];

          const filePath = path.join(__dirname, 'data', `${roomId}_roles.json`);
          if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡πâ‡∏ß`);
          }
        }, 2 * 60 * 1000);

      } else {
        io.to(roomId).emit('updatePlayers', rooms[roomId].players);
        io.to(roomId).emit('updatePlayerList', rooms[roomId].players);
      }

    }

  delete backendPlayers[socket.playerName];
  });

  function generateDeck() {
    const deck = [];
    deck.push("‡πÅ‡∏°‡πà‡∏°‡∏î");
    deck.push("‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à");
    for (let i = 0; i < 18; i++) {
      deck.push("‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô");
    }
    return deck;
  }

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  function dealCards(players) {
    let deck = shuffle(generateDeck());
    const roles = {};
    players.forEach((playerName) => {
      roles[playerName] = [];
      for (let i = 0; i < 5; i++) {
        roles[playerName].push(deck.pop());
      }
    });
    return roles; // { "player1": ["‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô", "‡πÅ‡∏°‡πà‡∏°‡∏î", ...], "player2": [...] }
  }

  function findSocketByName(roomId, playerName) {
    return playerSockets[roomId]?.[playerName];
  }

  function saveRolesToFile(roomId, roles) {
    const dir = path.join(__dirname, 'data');
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }

    const filePath = path.join(dir, `${roomId}_roles.json`);
    const data = {
      timestamp: new Date().toISOString(),
      roles
    };
    fs.writeFileSync(filePath, JSON.stringify({ roles }, null, 2), 'utf8');
  }

  function loadRolesFromFile(roomId) {
    const filePath = path.join(__dirname, 'data', `${roomId}_roles.json`);
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      try {
        const parsed = JSON.parse(data);
        if (parsed.roles) return parsed.roles;
        return parsed; // fallback
      } catch (err) {
        console.error("Error parsing JSON file:", err);
        return null;
      }
    }
    return null;
  }

  socket.on("startGame", ({ roomId , playerName }) => {
    const room = rooms[roomId];
    if (!room) return;

    if (socket.playerName !== room.host) {
      socket.emit("error", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏Æ‡∏™‡∏ï‡πå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ");
      return;
    }

    const roles = dealCards(room.players); // ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï 5 ‡πÉ‡∏ö
    rooms[roomId].roles = roles;

    // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    saveRolesToFile(roomId, roles);

    room.players.forEach((playerName) => {
      const playerSocket = findSocketByName(roomId, playerName);
      if (playerSocket) {
        playerSocket.emit("yourRole", roles[playerName]);
      }
    });

    console.log(`[${new Date().toLocaleString()}] ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡πÉ‡∏´‡πâ‡∏´‡πâ‡∏≠‡∏á ${roomId}:`, roles);

    io.to(roomId).emit("gameState", {
      message: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏à‡∏Å‡πÑ‡∏û‡πà‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      players: room.players.map((playerName) => ({ playerName, status: "‡∏õ‡∏Å‡∏ï‡∏¥" })),
    });

    io.to(roomId).emit("gameStarted");
  });

  socket.on("reconnectToRoom", ({ roomId, playerName }) => {
    socket.playerName = playerName;
    socket.roomId = roomId;

    socket.join(roomId);
    console.log(`${playerName} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á
    if (roomCleanupTimers[roomId]) {
      clearTimeout(roomCleanupTimers[roomId]);
      delete roomCleanupTimers[roomId];
      console.log(`üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤`);
    }

    // ‚õ≥Ô∏è ‡πÇ‡∏´‡∏•‡∏î roles ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    const roles = loadRolesFromFile(roomId);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á room object ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: [],
        roles: roles || {},
        host: null,
      };
    } else if (!rooms[roomId].roles && roles) {
      rooms[roomId].roles = roles; // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ memory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }

    // ‚úÖ ‡πÉ‡∏™‡πà player ‡∏•‡∏á‡πÉ‡∏ô room ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!rooms[roomId].players.includes(playerName)) {
      rooms[roomId].players.push(playerName);
    }

    // ‡∏™‡πà‡∏á‡πÑ‡∏û‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    if (rooms[roomId].roles && rooms[roomId].roles[playerName]) {
      socket.emit("yourRole", rooms[roomId].roles[playerName]);
    } else {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏û‡πà‡∏Ç‡∏≠‡∏á ${playerName}`);
    }
    console.log(`‡∏™‡πà‡∏á‡πÑ‡∏û‡πà‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á ${roomId}`,roles);

    // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const players = rooms[roomId].players;
    io.to(socket.id).emit("gameState", {
      players: players.map((playerName) => ({ playerName, status: "‡∏õ‡∏Å‡∏ï‡∏¥" })),
    });
    
    io.to(roomId).emit('updatePlayers', rooms[roomId].players);
  });

  // socket.on("endGame", ({ roomId }) => {
  //   if (!rooms[roomId]) return;

  //   console.log(`üéØ ‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);

  //   delete rooms[roomId];
  //   delete playerSockets[roomId];
  //   delete backendPlayers[roomId];

  //   const filePath = path.join(__dirname, 'data', `${roomId}_roles.json`);
  //   if (fs.existsSync(filePath)) {
  //     fs.unlinkSync(filePath);
  //     console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${roomId} ‡πÅ‡∏•‡πâ‡∏ß`);
  //   }

  //   io.to(roomId).emit("gameEnded", { message: "‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô!" });
  // });

  console.log(backendPlayers)
});

setInterval(() => {
  io.emit('updatePlayers', backendPlayers);
}, 150)